{"ast":null,"code":"var _jsxFileName = \"F:\\\\MERN\\\\moviestreaming\\\\src\\\\Components\\\\Movies\\\\MovieList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport sliderControl from \"../../Images/slider-control.jpg\";\nimport star from \"../../Images/star.png\";\nimport { api_key, fetchDataFromServer } from \"../../Api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MovieList() {\n  _s();\n  const location = useLocation();\n  const genreId = new URLSearchParams(location.search).get(\"genre\");\n  const [movieList, setMovieList] = useState([]);\n  const [genreName, setGenreName] = useState(\"\");\n  useEffect(() => {\n    if (genreId) {\n      fetchDataFromServer(`https://api.themoviedb.org/3/genre/movie/list?api_key=${api_key}`, handleGenreData);\n      fetchDataFromServer(`https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&sort_by=popularity.desc&include_adult=false&page=1&with_genres=${genreId}`, handleMovieData);\n    }\n  }, [genreId]);\n  const handleGenreData = function (data) {\n    const genre = data.genres.find(genre => genre.id === parseInt(genreId));\n    if (genre) {\n      setGenreName(genre.name);\n    }\n  };\n  const handleMovieData = function ({\n    results\n  }) {\n    setMovieList(results);\n  };\n\n  // Loading functionality\n\n  document.querySelector(\"[load-more]\").addEventListener(\"click\", function () {\n    if (currentpage >= totalpage) {\n      this.style.display = \"none\";\n      return;\n    }\n    currentpage++;\n    this.classList.add(\"loading\");\n    fetchDataFromServer(fetchURL, ({\n      results: movieList\n    }) => {\n      this.classList.remove(\"loading\");\n      for (const movie of movieList) {\n        const movieCard = createMovieCard(movie);\n        movieListElem.querySelector(\".grid-list\");\n      }\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"movie-list genre-list\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"heading\",\n        children: [\"All \", genreName, \" Movies\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-list\",\n      children: movieList.map((movie, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movie-card movie-card-small\",\n        children: [/*#__PURE__*/_jsxDEV(\"figure\", {\n          className: \"poster-box card-banner\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `https://image.tmdb.org/t/p/w500${movie.poster_path}`,\n            alt: movie.title,\n            className: \"img-cover\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"title\",\n          children: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"meta-list\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"meta-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: star,\n              alt: \"rating\",\n              width: \"20\",\n              height: \"20\",\n              loading: \"lazy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"span\",\n              children: movie.vote_average\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-badge\",\n            children: movie.release_date.slice(0, 4)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/details/${movie.id}`,\n          className: \"card-btn\",\n          title: movie.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn load-more\",\n      \"load-more\": true,\n      children: \"Load More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(MovieList, \"fKhRkR/rvy1WpijDlg+U1p+5ZBQ=\", false, function () {\n  return [useLocation];\n});\n_c = MovieList;\nexport default MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useEffect","useState","Link","useLocation","sliderControl","star","api_key","fetchDataFromServer","jsxDEV","_jsxDEV","MovieList","_s","location","genreId","URLSearchParams","search","get","movieList","setMovieList","genreName","setGenreName","handleGenreData","handleMovieData","data","genre","genres","find","id","parseInt","name","results","document","querySelector","addEventListener","currentpage","totalpage","style","display","classList","add","fetchURL","remove","movie","movieCard","createMovieCard","movieListElem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","src","poster_path","alt","title","width","height","loading","vote_average","release_date","slice","to","_c","$RefreshReg$"],"sources":["F:/MERN/moviestreaming/src/Components/Movies/MovieList.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport sliderControl from \"../../Images/slider-control.jpg\";\r\nimport star from \"../../Images/star.png\";\r\nimport { api_key, fetchDataFromServer } from \"../../Api\";\r\n\r\nfunction MovieList() {\r\n  const location = useLocation();\r\n  const genreId = new URLSearchParams(location.search).get(\"genre\");\r\n\r\n  const [movieList, setMovieList] = useState([]);\r\n  const [genreName, setGenreName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (genreId) {\r\n      fetchDataFromServer(\r\n        `https://api.themoviedb.org/3/genre/movie/list?api_key=${api_key}`,\r\n        handleGenreData\r\n      );\r\n      fetchDataFromServer(\r\n        `https://api.themoviedb.org/3/discover/movie?api_key=${api_key}&sort_by=popularity.desc&include_adult=false&page=1&with_genres=${genreId}`,\r\n        handleMovieData\r\n      );\r\n    }\r\n  }, [genreId]);\r\n\r\n  const handleGenreData = function (data) {\r\n    const genre = data.genres.find((genre) => genre.id === parseInt(genreId));\r\n    if (genre) {\r\n      setGenreName(genre.name);\r\n    }\r\n  };\r\n\r\n  const handleMovieData = function ({ results }) {\r\n    setMovieList(results);\r\n  };\r\n\r\n  // Loading functionality\r\n\r\n  document.querySelector(\"[load-more]\").addEventListener(\"click\", function(){\r\n    if (currentpage >= totalpage){\r\n      this.style.display = \"none\";\r\n      return\r\n    }\r\n\r\n    currentpage++;\r\n    this.classList.add(\"loading\")\r\n\r\n    fetchDataFromServer(fetchURL, ({ results: movieList}) => {\r\n      this.classList.remove(\"loading\");\r\n\r\n      for (const movie of movieList){\r\n        const movieCard = createMovieCard(movie);\r\n\r\n        movieListElem.querySelector(\".grid-list\")\r\n      }\r\n    })\r\n  })\r\n\r\n  return (\r\n    <section className=\"movie-list genre-list\">\r\n      <div className=\"title-wrapper\">\r\n        <h1 className=\"heading\">All {genreName} Movies</h1>\r\n      </div>\r\n      <div className=\"grid-list\">\r\n        {movieList.map((movie, index) => (\r\n          <div key={index} className=\"movie-card movie-card-small\">\r\n            <figure className=\"poster-box card-banner\">\r\n              <img\r\n                src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`}\r\n                alt={movie.title}\r\n                className=\"img-cover\"\r\n              />\r\n            </figure>\r\n            <h4 className=\"title\">{movie.title}</h4>\r\n            <div className=\"meta-list\">\r\n              <div className=\"meta-item\">\r\n                <img\r\n                  src={star}\r\n                  alt=\"rating\"\r\n                  width=\"20\"\r\n                  height=\"20\"\r\n                  loading=\"lazy\"\r\n                />\r\n                <span className=\"span\">{movie.vote_average}</span>\r\n              </div>\r\n              <div className=\"card-badge\">{movie.release_date.slice(0, 4)}</div>\r\n            </div>\r\n            <Link\r\n              to={`/details/${movie.id}`}\r\n              className=\"card-btn\"\r\n              title={movie.title}\r\n            ></Link>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button className=\"btn load-more\" load-more>Load More</button>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default MovieList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AACpD,OAAOC,aAAa,MAAM,iCAAiC;AAC3D,OAAOC,IAAI,MAAM,uBAAuB;AACxC,SAASC,OAAO,EAAEC,mBAAmB,QAAQ,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAMC,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAC9B,MAAMU,OAAO,GAAG,IAAIC,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC,CAACC,GAAG,CAAC,OAAO,CAAC;EAEjE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAE9CD,SAAS,CAAC,MAAM;IACd,IAAIa,OAAO,EAAE;MACXN,mBAAmB,CAChB,yDAAwDD,OAAQ,EAAC,EAClEe,eACF,CAAC;MACDd,mBAAmB,CAChB,uDAAsDD,OAAQ,mEAAkEO,OAAQ,EAAC,EAC1IS,eACF,CAAC;IACH;EACF,CAAC,EAAE,CAACT,OAAO,CAAC,CAAC;EAEb,MAAMQ,eAAe,GAAG,SAAAA,CAAUE,IAAI,EAAE;IACtC,MAAMC,KAAK,GAAGD,IAAI,CAACE,MAAM,CAACC,IAAI,CAAEF,KAAK,IAAKA,KAAK,CAACG,EAAE,KAAKC,QAAQ,CAACf,OAAO,CAAC,CAAC;IACzE,IAAIW,KAAK,EAAE;MACTJ,YAAY,CAACI,KAAK,CAACK,IAAI,CAAC;IAC1B;EACF,CAAC;EAED,MAAMP,eAAe,GAAG,SAAAA,CAAU;IAAEQ;EAAQ,CAAC,EAAE;IAC7CZ,YAAY,CAACY,OAAO,CAAC;EACvB,CAAC;;EAED;;EAEAC,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC,CAACC,gBAAgB,CAAC,OAAO,EAAE,YAAU;IACxE,IAAIC,WAAW,IAAIC,SAAS,EAAC;MAC3B,IAAI,CAACC,KAAK,CAACC,OAAO,GAAG,MAAM;MAC3B;IACF;IAEAH,WAAW,EAAE;IACb,IAAI,CAACI,SAAS,CAACC,GAAG,CAAC,SAAS,CAAC;IAE7BhC,mBAAmB,CAACiC,QAAQ,EAAE,CAAC;MAAEV,OAAO,EAAEb;IAAS,CAAC,KAAK;MACvD,IAAI,CAACqB,SAAS,CAACG,MAAM,CAAC,SAAS,CAAC;MAEhC,KAAK,MAAMC,KAAK,IAAIzB,SAAS,EAAC;QAC5B,MAAM0B,SAAS,GAAGC,eAAe,CAACF,KAAK,CAAC;QAExCG,aAAa,CAACb,aAAa,CAAC,YAAY,CAAC;MAC3C;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,oBACEvB,OAAA;IAASqC,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACxCtC,OAAA;MAAKqC,SAAS,EAAC,eAAe;MAAAC,QAAA,eAC5BtC,OAAA;QAAIqC,SAAS,EAAC,SAAS;QAAAC,QAAA,GAAC,MAAI,EAAC5B,SAAS,EAAC,SAAO;MAAA;QAAA6B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACN1C,OAAA;MAAKqC,SAAS,EAAC,WAAW;MAAAC,QAAA,EACvB9B,SAAS,CAACmC,GAAG,CAAC,CAACV,KAAK,EAAEW,KAAK,kBAC1B5C,OAAA;QAAiBqC,SAAS,EAAC,6BAA6B;QAAAC,QAAA,gBACtDtC,OAAA;UAAQqC,SAAS,EAAC,wBAAwB;UAAAC,QAAA,eACxCtC,OAAA;YACE6C,GAAG,EAAG,kCAAiCZ,KAAK,CAACa,WAAY,EAAE;YAC3DC,GAAG,EAAEd,KAAK,CAACe,KAAM;YACjBX,SAAS,EAAC;UAAW;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtB;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACI,CAAC,eACT1C,OAAA;UAAIqC,SAAS,EAAC,OAAO;UAAAC,QAAA,EAAEL,KAAK,CAACe;QAAK;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACxC1C,OAAA;UAAKqC,SAAS,EAAC,WAAW;UAAAC,QAAA,gBACxBtC,OAAA;YAAKqC,SAAS,EAAC,WAAW;YAAAC,QAAA,gBACxBtC,OAAA;cACE6C,GAAG,EAAEjD,IAAK;cACVmD,GAAG,EAAC,QAAQ;cACZE,KAAK,EAAC,IAAI;cACVC,MAAM,EAAC,IAAI;cACXC,OAAO,EAAC;YAAM;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACf,CAAC,eACF1C,OAAA;cAAMqC,SAAS,EAAC,MAAM;cAAAC,QAAA,EAAEL,KAAK,CAACmB;YAAY;cAAAb,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C,CAAC,eACN1C,OAAA;YAAKqC,SAAS,EAAC,YAAY;YAAAC,QAAA,EAAEL,KAAK,CAACoB,YAAY,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC;UAAC;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC/D,CAAC,eACN1C,OAAA,CAACP,IAAI;UACH8D,EAAE,EAAG,YAAWtB,KAAK,CAACf,EAAG,EAAE;UAC3BmB,SAAS,EAAC,UAAU;UACpBW,KAAK,EAAEf,KAAK,CAACe;QAAM;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACd,CAAC;MAAA,GA1BAE,KAAK;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OA2BV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN1C,OAAA;MAAQqC,SAAS,EAAC,eAAe;MAAC,iBAAS;MAAAC,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEd;AAACxC,EAAA,CA7FQD,SAAS;EAAA,QACCP,WAAW;AAAA;AAAA8D,EAAA,GADrBvD,SAAS;AA+FlB,eAAeA,SAAS;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}